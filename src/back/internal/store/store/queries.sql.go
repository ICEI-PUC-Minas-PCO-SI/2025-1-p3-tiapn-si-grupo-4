// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package store

import (
	"context"
	"database/sql"
	"time"
)

const getLogs = `-- name: GetLogs :many
select id, servertime, log, level, source, created_at from logs
`

func (q *Queries) GetLogs(ctx context.Context) ([]Log, error) {
	rows, err := q.db.QueryContext(ctx, getLogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Log
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.Servertime,
			&i.Log,
			&i.Level,
			&i.Source,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const log = `-- name: Log :execresult
INSERT INTO logs (
  id,
  servertime,
  log,
  ` + "`" + `level` + "`" + `,
  source
) VALUES (
  ?, ?, ?, ?, ?
)
`

type LogParams struct {
	ID         string
	Servertime time.Time
	Log        string
	Level      string
	Source     sql.NullString
}

func (q *Queries) Log(ctx context.Context, arg LogParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, log,
		arg.ID,
		arg.Servertime,
		arg.Log,
		arg.Level,
		arg.Source,
	)
}
